// Generated by CoffeeScript 1.9.3
(function() {
  var Camera, Map, Matrix, cam, frame, map, rotMatrix;

  Camera = (function() {
    function Camera(w, h, fov, x, y, z, tx, ty, tz) {
      var ref;
      this.canvases = document.getElementsByTagName('canvas');
      this.canvas = this.canvases[0];
      this.canvas.height = h;
      this.canvas.width = w;
      this.canvas.style.height = h + 'px';
      this.canvas.style.width = w + 'px';
      this.ctx = this.canvas.getContext('2d');
      ref = {
        w: w,
        h: h,
        fov: fov,
        x: x,
        y: y,
        z: z,
        tx: tx,
        ty: ty,
        tz: tz
      }, this.w = ref.w, this.h = ref.h, this.fov = ref.fov, this.x = ref.x, this.y = ref.y, this.z = ref.z, this.tx = ref.tx, this.ty = ref.ty, this.tz = ref.tz;
      this.origin = {
        x: this.w / 2,
        y: this.h / 2
      };
    }

    Camera.prototype.clear = function() {
      this.ctx.fillStyle = 'black';
      return this.ctx.fillRect(0, 0, this.w, this.h);
    };

    Camera.prototype.trace = function(map) {
      var dpx, dpy, dx, dy, dz, i, iter, j, len1, len2, line, point, px, py, ref, ref1, results, spoints, tx, ty, tz;
      this.ctx.fillStyle = 'white';
      this.ctx.strokeStyle = 'white';
      spoints = {};
      ref = map.points;
      for (iter = i = 0, len1 = ref.length; i < len1; iter = ++i) {
        point = ref[iter];
        dx = point[0] - this.x;
        dy = point[1] - this.y;
        dz = point[2] - this.z;
        tx = Math.atan(dx / dz + this.tx);
        ty = Math.atan(dy / dz + this.ty);
        tz = this.tz;
        dpx = this.fov * this.h * tx;
        dpy = this.fov * this.h * ty;
        px = dpx + this.origin.x;
        py = this.origin.y - dpy;
        spoints[iter] = [px, py];
      }
      ref1 = map.lines;
      results = [];
      for (j = 0, len2 = ref1.length; j < len2; j++) {
        line = ref1[j];
        this.ctx.beginPath();
        this.ctx.moveTo(spoints[line[0]][0], spoints[line[0]][1]);
        this.ctx.lineTo(spoints[line[1]][0], spoints[line[1]][1]);
        results.push(this.ctx.stroke());
      }
      return results;
    };

    return Camera;

  })();

  Map = (function() {
    function Map() {
      this.points = [[0, 0, 0]];
      this.lines = [];
      this.i = setInterval(this.addPoints.bind(this), 50);
    }

    Map.prototype.addPoints = function() {
      var len, newPoint;
      len = this.points.length - 1;
      newPoint = this.points[len];
      newPoint[0] += Math.random() - 0.5;
      newPoint[1] += Math.random() - 0.5;
      newPoint[2] += Math.random() - 0.5;
      this.points.push(newPoint);
      return this.lines.push([len, len + 1]);
    };

    Map.prototype.applyMatrix = function(rotMatrix) {
      var i, iter, len1, origMatrix, point, ref, resMatrix, results;
      ref = this.points;
      results = [];
      for (iter = i = 0, len1 = ref.length; i < len1; iter = ++i) {
        point = ref[iter];
        origMatrix = new Matrix(1, 3, point);
        resMatrix = rotMatrix.mul(origMatrix);
        results.push(this.points[iter] = resMatrix.toArray()[0]);
      }
      return results;
    };

    return Map;

  })();

  Matrix = (function() {
    function Matrix(w, h, els) {
      var ref;
      ref = {
        w: w,
        h: h,
        els: els
      }, this.w = ref.w, this.h = ref.h, this.els = ref.els;
    }

    Matrix.prototype.get = function(c, r) {
      return this.els[r * this.h + c];
    };

    Matrix.prototype.mul = function(m2) {
      var i, intSum, j, k, lCol, n, rRow, ref, ref1, ref2, resEls;
      if (this.w !== m2.h) {
        throw new Error('Cannot multiply this matrix: ' + this.w + ' by ' + m2.h);
      }
      resEls = [];
      for (lCol = i = 0, ref = this.h - 1; 0 <= ref ? i <= ref : i >= ref; lCol = 0 <= ref ? ++i : --i) {
        for (rRow = j = 0, ref1 = m2.w - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; rRow = 0 <= ref1 ? ++j : --j) {
          intSum = 0;
          for (n = k = 0, ref2 = this.w - 1; 0 <= ref2 ? k <= ref2 : k >= ref2; n = 0 <= ref2 ? ++k : --k) {
            intSum += this.get(lCol, n) * m2.get(n, rRow);
          }
          resEls[lCol * this.h + rRow] = intSum;
        }
      }
      return new Matrix(m2.w, this.h, resEls);
    };

    Matrix.prototype.toArray = function() {
      var arr, i, j, ref, ref1, x, y;
      arr = [];
      for (x = i = 0, ref = this.w - 1; 0 <= ref ? i <= ref : i >= ref; x = 0 <= ref ? ++i : --i) {
        arr[x] = [];
        for (y = j = 0, ref1 = this.h - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; y = 0 <= ref1 ? ++j : --j) {
          arr[x][y] = this.get(x, y);
        }
      }
      return arr;
    };

    return Matrix;

  })();

  Matrix.createRot = function(tx, ty, tz) {
    var cx, cy, cz, sx, sy, sz;
    sx = Math.sin(tx);
    sy = Math.sin(ty);
    sz = Math.sin(tz);
    cx = Math.cos(tx);
    cy = Math.cos(ty);
    cz = Math.cos(tz);
    return new Matrix(3, 3, [cz * cy, -sz * cy, sy, sy * sx * cz + cx * sz, -sy * sx * sz + cx * cz, -sx * cy, -sy * cx * cz + sx * sz, sy * cx * sz + cz * sx, cx * cy]);
  };

  cam = new Camera(window.innerWidth, window.innerHeight, Math.PI / 2, 0.5, 0.5, -50, 0, 0, 0);

  map = new Map;

  rotMatrix = Matrix.createRot(0.01, 0.01, 0.01);

  frame = function() {
    map.applyMatrix(rotMatrix);
    cam.clear();
    cam.trace(map);
    return window.requestAnimationFrame(frame);
  };

  frame();

}).call(this);
